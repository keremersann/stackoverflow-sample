@model StackOverFlowClone.ViewModels.EditUserPasswordViewModel
@{
    ViewBag.Title = "Change Password";
}

<div class="row">
    <div class="col-sm-12">
        <h1>Change Password</h1>
        @using (Html.BeginForm("ChangePassword", "Account", FormMethod.Post, new { novalidate = "novalidate", @class = "needs-validation" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.UserID)
            <div class="form-row">
                <div class="form-group col-sm-6">
                    @Html.LabelFor(model => model.Email)
                    @Html.DisplayFor(model => model.Email, new { @class = "form-control", type = "email" })
                    @Html.HiddenFor(model => model.Email)
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-sm-6">
                    @Html.LabelFor(model => model.Password)
                    @Html.TextBoxFor(model => model.Password, new
               {
                   @class = "form-control",
                   placeholder = "Password",
                   required = "required",
                   type = "password",
                   minlength = "6",
                   oninput = "form.ConfirmPassword.pattern = escapeRegExp(this.value)"
               })
                    <div class="valid-feedback">
                        Looks good!
                    </div>
                    <div class="invalid-feedback">
                        Password must contain at least 6 characters
                    </div>
                    <span class="password-same text-danger"></span>
                </div>
                <div class="form-group col-sm-6">
                    @Html.LabelFor(model => model.ConfirmPassword)
                    @Html.TextBoxFor(model => model.ConfirmPassword, new
                    {
                   @class = "form-control",
                        placeholder = "Confirm Password",
                        required = "required",
                        type = "password"
                    })
                    <div class="valid-feedback">
                        Looks good!
                    </div>
                    <div class="invalid-feedback">
                        Password and Confirm Password do not match!
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Update Password</button>
        }
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script>
    $(document).ready(function () {
        $("#Password").attr("value", "");
        $("a[href='/Account/ChangePassword']").attr("id", "active");
        $(document).on("submit", ".needs-validation", validate);
        $(".needs-validation input").blur(validate);
        $("#Password").blur(checkPreviousPassword);
    });
    function validate(event) {
        if ($(".needs-validation")[0].checkValidity() == false || $(".password-same").text() != "") {
            event.preventDefault();
        }
        $(".needs-validation")[0].classList.add("was-validated");
    }
    function escapeRegExp(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
    function checkPreviousPassword() {
        $.ajax({
            url: "/api/account/getPassword?userId=" + @Model.UserID,
            type: "GET",
            success: function (response) {
                let enteredPasswordHashed = sha256($("#Password").val());
                if (response == enteredPasswordHashed) {
                    $(".password-same").text("The password you entered is the same as before");
                    $(".password-same").parent(".form-group").find(".valid-feedback").css("color", "white")
                }
                else {
                    $(".password-same").text("");
                    $(".password-same").parent(".form-group").find(".valid-feedback").css("color", "#28a745")
                }
            },
            error: function () { $(".email-exist").text("Error"); }
        });
    }
    function sha256(input) {
        return CryptoJS.SHA256(input).toString(CryptoJS.enc.Hex);
    }
</script>